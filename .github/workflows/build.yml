---

name: Build

on:
  push:
    branches:
      - '**'
  pull_request:
  release:
    types: [edited, published]
  schedule:
    - cron: '0 10 * * *'  # everyday at 10am
  workflow_dispatch:
    inputs:
      dispatch-tag:
        description: "Tag to apply to pushed images"
        required: true
        default: dispatch

permissions:
  actions: read
  contents: read

jobs:
  config:
    name: "Config"
    uses: ./.github/workflows/_config.yml

  metadata:
    name: "Metadata"
    needs: [config]
    uses: ./.github/workflows/_metadata.yml
    with:
      image_name: ${{ needs.config.outputs.image_name }}

  foundry-secrets:
    name: "Foundry secrets"
    runs-on: ubuntu-latest
    steps:
      - name: Check foundry.com credentials
        run: |
          return_code=0
          if [ -z "${{ secrets.FOUNDRY_USERNAME }}" ]; then
            echo "::warning::Set the FOUNDRY_USERNAME secret."
            return_code=1
          fi
          if [ -z "${{ secrets.FOUNDRY_PASSWORD }}" ]; then
            echo "::warning::Set the FOUNDRY_PASSWORD secret."
            return_code=1
          fi
          exit $return_code

  docker-secrets:
    name: "Docker secrets"
    runs-on: ubuntu-latest
    steps:
      - name: Check docker.com credentials
        run: |
          return_code=0
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "::warning::Set the DOCKER_USERNAME secret."
            # return_code=1
          fi
          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "::warning::Set the DOCKER_PASSWORD secret."
            # return_code=1
          fi
          exit $return_code
          
  ecr-secrets:
    name: "AWS ECR secrets"
    runs-on: ubuntu-latest
    steps:
      - name: Check AWS ECR credentials
        run: |
          return_code=0
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "::warning::Set the AWS_ACCESS_KEY_ID secret."
            return_code=1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "::warning::Set the AWS_SECRET_ACCESS_KEY secret."
            return_code=1
          fi
          if [ -z "${{ secrets.ECR_REPOSITORY }}" ]; then
            echo "::warning::Set the ECR_REPOSITORY secret."
            return_code=1
          fi
          exit $return_code

  artifact-key:
    name: "Artifact key"
    runs-on: ubuntu-latest
    steps:
      - name: Check artifact key
        run: |
          if [ -z "${{ secrets.ARTIFACT_KEY }}" ]; then
            echo "::warning::Set the ARTIFACT_KEY secret."
            exit 1
          fi

  lint:
    name: "Lint"
    needs: [config]
    uses: ./.github/workflows/_lint.yml
    with:
      go_version: ${{ needs.config.outputs.go_version }}
      python_version: ${{ needs.config.outputs.python_version }}
      shfmt_version: ${{ needs.config.outputs.shfmt_version }}

  build-normal-test-image:
    name: "Normal"
    needs: [config, metadata]
    uses: ./.github/workflows/_build-test-image.yml
    with:
      artifact_name: ${{ needs.config.outputs.normal_image_artifact_name }}
      image_labels: ${{ needs.metadata.outputs.image_labels }}
    secrets:
      build_args: |
        VERSION=${{ needs.metadata.outputs.source_version }}

  build-pre-installed-test-image:
    name: "Pre-installed"
    needs: [artifact-key, config, foundry-secrets, metadata]
    uses: ./.github/workflows/_build-test-image.yml
    with:
      artifact_name: ${{ needs.config.outputs.pre_installed_image_artifact_name }}
      image_labels: ${{ needs.metadata.outputs.image_labels }}
    secrets:
      artifact_key: ${{ secrets.ARTIFACT_KEY }}
      build_args: |
        FOUNDRY_PASSWORD=${{ secrets.FOUNDRY_PASSWORD }}
        FOUNDRY_USERNAME=${{ secrets.FOUNDRY_USERNAME }}
        VERSION=${{ needs.metadata.outputs.source_version }}

  test-normal-image:
    name: "Normal"
    needs: [artifact-key, build-normal-test-image, config, foundry-secrets]
    uses: ./.github/workflows/_test-image.yml
    with:
      data_artifact_name: ${{ needs.config.outputs.normal_data_artifact_name }}
      image_artifact_name: ${{ needs.config.outputs.normal_image_artifact_name }}
    secrets:
      data_artifact_key: ${{ secrets.ARTIFACT_KEY }}
      foundry_password: ${{ secrets.FOUNDRY_PASSWORD }}
      foundry_username: ${{ secrets.FOUNDRY_USERNAME }}

  test-pre-installed-image:
    name: "Pre-installed"
    needs: [artifact-key, config, build-pre-installed-test-image]
    uses: ./.github/workflows/_test-image.yml
    with:
      data_artifact_name: ${{ needs.config.outputs.pre_installed_data_artifact_name }}
      image_artifact_name: ${{ needs.config.outputs.pre_installed_image_artifact_name }}
    secrets:
      data_artifact_key: ${{ secrets.ARTIFACT_KEY }}
      image_artifact_key: ${{ secrets.ARTIFACT_KEY }}

  build-and-push:
    needs: [config, docker-secrets, lint, metadata, test-normal-image, test-pre-installed-image]
    if: github.event_name != 'pull_request'
    name: "Publish"
    permissions:
      packages: write
    uses: ./.github/workflows/_build-push-all.yml
    with:
      build_args: |
        VERSION=${{ needs.metadata.outputs.source_version }}
      do_publish_readme: ${{ github.event_name == 'release' && !github.event.release.prerelease}}
      image_labels: ${{ needs.metadata.outputs.image_labels }}
      image_name: ${{ needs.config.outputs.image_name }}
      image_tags: ${{ needs.metadata.outputs.image_tags }}
      platforms: ${{ needs.config.outputs.platforms }}
    secrets:
      docker_password: ${{ secrets.DOCKER_PASSWORD }}
      docker_username: ${{ secrets.DOCKER_USERNAME }}
      ecr_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      ecr_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ecr_repository: ${{ secrets.ECR_REPOSITORY }}
